{"version":3,"sources":["componentes/Header.jsx","componentes/Formulario.jsx","componentes/Errores.jsx","componentes/Clima.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Errores","mensaje","Clima","mostrarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","temp","toFixed","src","alt","temp_max","temp_min","App","state","error","consulta","consultaApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Errores","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4dd8a080.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Header = (props) => {\n    return (\n        <div>\n            <nav>\n                <div className=\"nav-wrapper light-blue darken-2\">\n                    <a className=\"brand-logo\">{props.titulo}</a>\n                </div>\n            </nav>\n        </div>\n      \n    );\n};\nHeader.propTypes = {\n    \n    titulo : PropTypes.string.isRequired\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Formulario extends Component {\n\n    //crear los refs\n    ciudadRef = React.createRef();\n    paisRef = React.createRef();\n\nbuscarClima = (e) =>{\n    \n    e.preventDefault();\n\n    //leer los refs y crear el objeto\n    const respuesta = {\n        ciudad : this.ciudadRef.current.value,\n        pais : this.paisRef.current.value\n    }\n\n    \n    //Mandarlos por props\n    this.props.datosConsulta(respuesta);\n\n    //Resetear el formulario\n}\n\n    render() {\n        return (\n            <div className= \"contenedor-form\">\n            <div className=\"container\">\n            <div className=\"row\">\n            <form onSubmit = {this.buscarClima}>\n                <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <input id= \"ciudad\" type=\"text\" ref = {this.ciudadRef}/>\n                <label htmlFor=\"ciudad\">Ciudad</label>\n                </div>\n                <div className=\"input-field col s12 m8 l4 offset-m2\">\n                <select ref= {this.paisRef}>\n                    <option value=\"\" defaultValue>Elige un pais</option>\n                    <option value=\"AR\">Argentina</option>\n                    <option value=\"US\">Estados Unidos</option>\n                    <option value=\"ES\">España</option>\n                    <option value=\"UK\">Gran Bretaña</option>\n                    <option value=\"FR\">Francia</option>\n                    <option value=\"MX\">Mexico</option>\n                    <option value=\"IT\">Italia</option>\n                    <option value=\"PT\">Portugal</option>\n\n                </select>\n                <label htmlFor=\"pais\">Pais</label>\n                </div>\n                <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\n                <input type=\"submit\" className= \"waves-effect waves-light btn-large yellow accent-4\" value= \"Buscar....\"/>\n                </div>\n            </form>\n            </div>\n            </div>\n                \n            </div>\n        );\n    }\n}\nFormulario.propTypes = {\n\n    datosConsulta : PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Errores = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className = \"col s12 m6 offset-m3\">\n                    <div className = \"card-panel red darken-4 error\">\n                        {props.mensaje}\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    );\n};\n\nErrores.propTypes = {\n\n    mensaje : PropTypes.string.isRequired\n}\n\nexport default Errores;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Clima extends Component {\n\n    mostrarResultado = () => {\n\n        //Deconstrucción\n        const{name, weather, main} = this.props.resultado;\n\n        if(!name || !weather || !main)\n        \n        return null;\n\n        const kelvin = 273.15;\n\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\n\n        return(\n            \n            <div className=\"row\">\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\n                    <div className=\"card-panel light-blue align-center\">\n                        <span className=\"white-text\">\n                            <h2>Resultado Clima de: {name}</h2>\n                            <p className=\"temperatura\">Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\n                                <img src={urlIcono} alt=\"`clima de ${name}`\"/></p>\n                            <p>Max. {main.temp_max - kelvin} &deg;C</p>\n                            <p>Min. {main.temp_min - kelvin} &deg;C</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n         )\n    }\n    render() { \n        return (\n            <div className=\"container\">\n            {this.mostrarResultado()}   \n            </div>\n        );\n    }\n}\nClima.propTypes = {\n\n    resultado : PropTypes.object.isRequired\n}\n\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Errores from './componentes/Errores';\nimport Clima from './componentes/Clima';\n\n\nclass App extends Component {\n\n  state = {\n    error : '',\n    consulta : {},\n    resultado : {}\n  }\n\n  componentDidMount(){\n    this.setState({\n      error : false\n    })\n  }\n  componentDidUpdate(prevProps, prevState){\n\n    if(prevState.consulta !== this.state.consulta){\n      this.consultaApi();\n    }\n    \n  }\n\n  consultaApi = () =>{\n\n    const{ciudad, pais} = this.state.consulta;\n    if(!ciudad || !pais){\n      return null;\n    }\n    //Obtenemos la url\n    const apiKey = \"ea3b8351dd1244cbb0e75645b7b2febe\";\n    let url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${apiKey}`;\n    \n    //Query con fetch api\n    fetch(url).then(respuesta =>{\n      return respuesta.json();\n    }).then(datos =>{\n      this.setState({\n        resultado : datos,\n        error : false\n      })\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\ndatosConsulta = respuesta => {\n  if(respuesta.ciudad === '' || respuesta.pais === ''){\n    this.setState({\n      error : true\n    })\n  }else{\n    this.setState({\n      consulta : respuesta\n    })\n  }\n}\n  render() {\n\n    //Definimos una variable con el valor de el state.\n    const {error} = this.state,\n          {cod} = this.state.resultado ;\n\n    //Creamos una variable que mostrara el componente o no en funcion de si hay error o no\n    let resultado;\n\n    if(error){\n      resultado = <Errores\n       mensaje = \"Todos los campos son obligatorios\"\n       />\n    }else if(cod === '404'){\n      resultado = <Errores\n      mensaje = \"Ciudad no encontrada\"\n      />\n    }\n    else{\n      resultado = <Clima\n      resultado = {this.state.resultado}\n      />\n    }\n    return (\n      <div className=\"App\">\n       <Header\n       titulo = \"Clima React\"\n       />\n       <Formulario\n       datosConsulta = {this.datosConsulta}\n       />\n       {resultado}\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}